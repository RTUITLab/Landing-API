@page "/projects/{Repo}"
@using AdminPanel.Services
@using Landing.API.Models
@using Landing.API.Services
@using Microsoft.EntityFrameworkCore

@inherits OwningComponentBase<ProjectInfoService>
@inject ApiInteractService ApiInteractService
@inject IJSRuntime JS
<h3>Edit @Repo</h3>
<button class="btn btn-primary" @onclick="() => UpdateIngoAboutProject()">Update info about project</button>


<div class="row">
    <div class="col-6">Current</div>
    <div class="col-6">New</div>
</div>

<div class="row">
    <div class="col-6">
        @if (currentInfo == null)
        {
            <p>No public info</p>
        }
        else
        {
            <h6><a href="@($"https://github.com/{currentInfo.Repo}/commit/{currentInfo.Commit}")" target="_blank">Commit</a></h6>
            <ProjectInfoView ProjectInfo="currentInfo.Info" />
        }
    </div>
    <div class="col-6">
        @if (newInfo == null)
        {
            <p>No new info</p>
        }
        else
        {
            <h6><a href="@($"https://github.com/{newInfo.Repo}/commit/{newInfo.Commit}")" target="_blank">Commit</a></h6>
            <ProjectInfoView ProjectInfo="newInfo.Info" />
            <button class="btn btn-success" @onclick="() => SubmitVersion(newInfo.Id)">Publish info</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Repo { get; set; }

    private ProjectInfoRecord currentInfo;
    private ProjectInfoRecord newInfo;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadData();

    }

    private async Task SubmitVersion(int id)
    {
        await Service.PublishInfo(Repo, id);
        await LoadData();
    }

    private async Task UpdateIngoAboutProject()
    {
        try
        {
            var result = await ApiInteractService.UpdateRepoInfo(Repo);
            if (!result)
            {
                throw new Exception("Incorrect result");
            }
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "Can't update project info, please check logs");
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            (currentInfo, newInfo) = await Service.GetRecordsForRepo(Repo);
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "Can't get info about project, please check logs");
        }
    }

}
